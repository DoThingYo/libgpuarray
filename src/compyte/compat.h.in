#ifndef COMPYTE_COMPAT
#define COMPYTE_COMPAT

#cmakedefine HAVE_STRL
#cmakedefine HAVE_ASPRINTF
#cmakedefine HAVE_MKSTEMP
#cmakedefine COMPYTE_SHARED

#ifdef _MSC_VER
#include <stddef.h>
#include <compyte/wincompat/stdint.h>
#define ssize_t intptr_t
#define SSIZE_MAX INTPTR_MAX
#else
#include <sys/types.h>
#include <stdint.h>
#endif

#ifdef COMPYTE_SHARED
 #ifdef _WIN32
  #ifdef COMPYTE_BUILDING_DLL
   #define COMPYTE_PUBLIC __declspec(dllexport)
  #else
   #define COMPYTE_PUBLIC __declspec(dllimport)
  #endif
  #define COMPYTE_LOCAL
 #else
  #if __GNUC__ >= 4
   #define COMPYTE_PUBLIC __attribute__((visibility ("default")))
   #define COMPYTE_LOCAL  __attribute__((visibility ("hidden")))
  #else
   #define COMPYTE_PUBLIC
   #define COMPYTE_LOCAL
  #endif
 #endif
#else
 #define COMPYTE_PUBLIC
 #define COMPYTE_LOCAL
#endif

#ifdef _MSC_VER
struct iovec {
  char *iov_base;
  size_t iov_len;
};
#else
#include <sys/uio.h>
#endif

#include <stdio.h>
#include <stdlib.h>

#ifndef HAVE_ASPRINTF
COMPYTE_LOCAL int asprintf(char **ret, const char *fmt, ...);
#endif

#ifndef HAVE_MKSTEMP
COMPYTE_LOCAL int mkstemp(char *path);
#endif

#ifdef _MSC_VER
/* God damn Microsoft ... */
#define snprintf _snprintf
#endif

#ifdef _MSC_VER
/* MS VC++ 2008 does not support inline */
#define inline 
#endif

#ifdef _MSC_VER
#define SPREFIX "I"
#else
#define SPREFIX "z"
#endif

#include <string.h>
#ifndef HAVE_STRL
COMPYTE_LOCAL size_t strlcpy(char *dst, const char *src, size_t size);
COMPYTE_LOCAL size_t strlcat(char *dst, const char *src, size_t size);
#endif

#endif
