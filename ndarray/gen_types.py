TYPEMAP = {}
i = 0

def add_type(name, cl, cuda, sz):
    global i
    TYPEMAP[i] = (cl, cuda, sz, "GA_"+name.upper())
    i+=1

add_type("bool", "bool", "uint8_t", 1)
add_type("byte", "char", "int8_t", 1)
add_type("ubyte", "unsigned char", "uint8_t", 1)

for name, sz in [("short", 2), ("int", 4), ("long", 8)]:
    add_type(name, name, "int%d_t"%(sz*8), sz)
    add_type("u"+name, "unsigned "+name, "uint%d_t"%(sz*8), sz)

add_type("longlong", "long long", "int128_t", 16)
add_type("ulonglong", "unsigned long long", "uint128_t", 16)

add_type("float", "float", "float", 4)
add_type("double", "double", "double", 8)
add_type("longdouble", "quad", "long double", 16)
add_type("cfloat", "cfloat_t", "cfloat_t", 8)
add_type("cdouble", "cdouble_t", "cdouble_t", 16)
add_type("clongdouble", "clongdouble_t", "clongdouble_t", 32)

i=23 # to sync with numpy.
add_type("half", None, "half", 2);

ntypes = i

VECTORMAP = {}
i = 0

def add_type(name, cl, cuda, sz):
    global i
    VECTORMAP[i] = (cl, cuda, sz, "GA_"+name.upper())
    i+=1

for s in [2, 3, 4, 8, 16]:
    add_type("byte"+str(s), "char"+str(s), "char"+str(s), s)
    add_type("ubyte"+str(s), "uchar"+str(s), "uchar"+str(s), s)

for name, sz in [("short", 2), ("int", 4), ("long", 8)]:
    for s in [2, 3, 4, 8, 16]:
        add_type(name+str(s), name+str(s), name+str(s), sz*s)
        add_type("u"+name+str(s), "u"+name+str(s), "u"+name+str(s), sz*s)

for name, sz in [("float", 4), ("double", 8), ("half", 2)]:
    for s in [2, 4, 8, 16]:
        add_type(name+str(s), name+str(s), name+str(s), sz*s)

nvec = i

header = open("compyte_types.h", "w")
header.write(""" /* This file is generated by gen_types.py */
#include <sys/types.h>

typedef struct _compyte_type {
  const char *cl_name;
  const char *cuda_name;
  size_t size;
  int typecode;
} compyte_type;

enum COMPYTE_TYPES {
""")

for i in range(ntypes):
    if i in TYPEMAP:
        header.write("  "+TYPEMAP[i][3]+" = "+str(i)+",\n")

header.write("\n  GA_DELIM = 255, /* To be forward-compatible with numpy */\n\n")

for i in range(nvec):
    header.write("  "+VECTORMAP[i][3]+",\n")

header.write("""};

extern compyte_type scalar_types[];
extern compute_type vector_types[];
""")
header.close()

impl = open("compyte_types.c", "w")

impl.write(""" /* This file is generated by gen_types.py */
#include "compyte_types.h"

compyte_type scalar_types[] = {
""")

for i in range(ntypes):
    if i in TYPEMAP:
        impl.write("""  {"%s", "%s", %d, %s},\n"""%TYPEMAP[i])
    else:
        impl.write("""  {NULL, NULL, 0, -1},\n""")

impl.write("""};

compyte_type vector_types[] = {
""")

for i in range(nvec):
    impl.write("""  {"%s", "%s", %d, %s},\n"""%VECTORMAP[i])

impl.write("""};
""")
